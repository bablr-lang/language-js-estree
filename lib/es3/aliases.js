const { objectEntries } = require('@cst-tokens/helpers/iterable');

const aliases = objectEntries({
  Binary: ['BinaryExpression', 'LogicalExpression'],
  Class: ['ClassDeclaration', 'ClassExpression'],
  CompletionStatement: ['BreakStatement', 'ContinueStatement', 'ReturnStatement', 'ThrowStatement'],
  Conditional: ['ConditionalExpression', 'IfStatement'],
  Declaration: ['FunctionDeclaration', 'VariableDeclaration'],
  Expression: [
    'ArrayExpression',
    'AssignmentExpression',
    'BinaryExpression',
    'BooleanLiteral',
    'CallExpression',
    'ConditionalExpression',
    'FunctionExpression',
    'Identifier',
    'LogicalExpression',
    'MemberExpression',
    'NewExpression',
    'NullLiteral',
    'NumericLiteral',
    'ObjectExpression',
    'RegExpLiteral',
    'SequenceExpression',
    'StringLiteral',
    'ThisExpression',
    'UnaryExpression',
    'UpdateExpression',
  ],
  For: ['ForInStatement', 'ForStatement'],
  Function: ['FunctionDeclaration', 'FunctionExpression'],
  LVal: ['Identifier', 'MemberExpression'],
  Literal: ['BooleanLiteral', 'NullLiteral', 'NumericLiteral', 'RegExpLiteral', 'StringLiteral'],
  Loop: ['DoWhileStatement', 'WhileStatement', 'ForInStatement', 'ForOfStatement', 'ForStatement'],
  Statement: [
    'BlockStatement',
    'BreakStatement',
    'ContinueStatement',
    'DebuggerStatement',
    'DoWhileStatement',
    'EmptyStatement',
    'ExpressionStatement',
    'ForInStatement',
    'ForOfStatement',
    'ForStatement',
    'FunctionDeclaration',
    'IfStatement',
    'LabeledStatement',
    'ReturnStatement',
    'SwitchStatement',
    'ThrowStatement',
    'TryStatement',
    'VariableDeclaration',
    'WhileStatement',
    'WithStatement',
  ],
  While: ['DoWhileStatement', 'WhileStatement'],
});

module.exports = { aliases };
